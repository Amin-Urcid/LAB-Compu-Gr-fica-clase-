#include <GL/glut.h>

#include "texture.h"
#include "figuras.h"
#include "Camera.h"

#include "cmodel/CModel.h"


//incluyendo biblioteca de irrklang
#include <irrKlang.h>

//enlazando al dll
#pragma comment(lib, "irrKlang.lib")

//arrancando el motor de sonido
irrklang::ISoundEngine* engine = irrklang::createIrrKlangDevice();

//agregando fuente de sonido para el audio de fondo
irrklang::ISoundSource* audioFondo = engine->addSoundSourceFromFile("audios/101-opening.mp3");

//agregando fuente de sonido para el audio de pikachu que es lanzado con tecla
irrklang::ISoundSource* audioPikachu = engine->addSoundSourceFromFile("audios/025-Pikachu.wav");


//----------------------------------------------
//para Linux las fuentes de sonido deben ser ogg

//agregando fuente de sonido para el audio de fondo
//irrklang::ISoundSource* audioFondo = engine->addSoundSourceFromFile("audios/101-opening.ogg");

//agregando fuente de sonido para el audio de pikachu que es lanzado con tecla
//irrklang::ISoundSource* audioPikachu = engine->addSoundSourceFromFile("audios/025-Pikachu.ogg");
//----------------------------------------------


static GLuint ciudad_display_list;	//Display List for the Monito


									//NEW// Keyframes
									//Variables de dibujo y manipulacion
float posX = 0, posY = 2.5, posZ = -3.5, rotRodIzq = 0;
float giroMonito = 0;
//PORTERO
float posXp = 20, posYp = 2.5, posZp = 0;
float movZportero = 0.0f;
bool porteroPos = true;
//jugador(defensa #1)
float posXd = 15, posYd = 2.5, posZd = 0.0;
float movYdefensa = 2.5f;
bool defensaPos = true;
bool animadefensa = false;
//BALÓN
float posXBal = 0, posYBal = 0.3, posZBal = 0;


#define MAX_FRAMES 30
int i_max_steps = 90;
int i_curr_steps = 0;

typedef struct _frame
{
	//Variables para GUARDAR Key Frames
	float posX;		//Variable para PosicionX
	float posY;		//Variable para PosicionY
	float posZ;		//Variable para PosicionZ
	float incX;		//Variable para IncrementoX
	float incY;		//Variable para IncrementoY
	float incZ;		//Variable para IncrementoZ
	float rotRodIzq;
	float rotInc;
	float giroMonito;
	float giroMonitoInc;
	float posXp;  //Posición para el portero en x
	float posYp;	//Posición para el portero en y
	float posZp; //Posición para el portero en z

	float IncXp;
	float IncYp;
	float IncZp;

	//Variables para frames de balón
	float posXBal;		//Variable para PosicionX de balón
	float posYBal;		//Variable para PosicionY de balón
	float posZBal;		//Variable para PosicionZ de balón
	float incXBal;		//Variable para IncrementoX de balón
	float incYBal;		//Variable para IncrementoY de balón
	float incZBal;		//Variable para IncrementoZ de balón

}FRAME;

FRAME KeyFrame[MAX_FRAMES];
int FrameIndex = 0;			//introducir datos
bool play = false;
int playIndex = 0;

//int w = 500, h = 500;
int frame = 0, time, timebase = 0;

//variables para cámara
CCamera objCamera;	//Create objet Camera
GLfloat g_lookupdown = 0.0f;    // Look Position In The Z-Axis (NEW) 


								//variables para texto dibujado
char s[30];
long int font = (long int)GLUT_BITMAP_HELVETICA_18;


//objetos de textura para skybox
CTexture textSkyboxUnica;
CTexture textSkyboxFrontal;
CTexture textSkyboxAtras;
CTexture textSkyboxIzquierda;
CTexture textSkyboxDerecha;
CTexture textSkyboxArriba;
CTexture textSkyboxAbajo;

//objetos de textura para ciudad
CTexture textCampo;	//textura para campo de futbol
CTexture textGrada;
CTexture textArbol1;
CTexture textArbol2;
CTexture textTierra;
CTexture textNube1;
CTexture textCaminoPeatonal;
CTexture textCaminoCarritos;
CTexture textBasePasto;
CTexture textBalon; //textura para el balón
CTexture text1;  //textura para la tribuna



				 //objetos de figura
CFiguras figSkybox;
CFiguras figCampo;
CFiguras figGradaFrontal;
CFiguras figPostes;
CFiguras figCaminoPeatonal;
CFiguras figCaminoCarritos;
CFiguras figBasePasto;
CFiguras jugador;  //Para crear Monito #1
CFiguras balon;  //Para crear el balón



void inicializar(void)     // Inicializamos parametros
{
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);	// Negro de fondo	

	glEnable(GL_TEXTURE_2D);

	glShadeModel(GL_SMOOTH);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glClearDepth(1.0f);			// Configuramos Depth Buffer
	glEnable(GL_DEPTH_TEST);	// Habilitamos Depth Testing
	glDepthFunc(GL_LEQUAL);		// Tipo de Depth Testing a realizar
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

	glEnable(GL_AUTO_NORMAL);
	glEnable(GL_NORMALIZE);



	//http://www.custommapmakers.org/skyboxes.php
	//con imágenes hechas para skybox para cada lado y arriba

	textSkyboxFrontal.LoadTGA("ely_hills/hills_ft.tga");
	textSkyboxFrontal.BuildGLTexture();
	textSkyboxFrontal.ReleaseImage();

	textSkyboxAtras.LoadTGA("ely_hills/hills_bk.tga");
	textSkyboxAtras.BuildGLTexture();
	textSkyboxAtras.ReleaseImage();

	textSkyboxIzquierda.LoadTGA("ely_hills/hills_lf.tga");
	textSkyboxIzquierda.BuildGLTexture();
	textSkyboxIzquierda.ReleaseImage();

	textSkyboxDerecha.LoadTGA("ely_hills/hills_rt.tga");
	textSkyboxDerecha.BuildGLTexture();
	textSkyboxDerecha.ReleaseImage();

	textSkyboxArriba.LoadTGA("ely_hills/hills_up.tga");
	textSkyboxArriba.BuildGLTexture();
	textSkyboxArriba.ReleaseImage();


	//texturas para ciudad
	textGrada.LoadTGA("futbol/pared-tribuna_v2.tga");
	textGrada.BuildGLTexture();
	textGrada.ReleaseImage();

	textCampo.LoadTGA("campo.tga");
	textCampo.BuildGLTexture();
	textCampo.ReleaseImage();

	textArbol1.LoadTGA("arbol1.tga");
	textArbol1.BuildGLTexture();
	textArbol1.ReleaseImage();

	textArbol2.LoadTGA("arbol2512x512.tga");
	textArbol2.BuildGLTexture();
	textArbol2.ReleaseImage();

	textTierra.LoadTGA("tierra512x512.tga");
	textTierra.BuildGLTexture();
	textTierra.ReleaseImage();

	textNube1.LoadTGA("nube1.tga");
	textNube1.BuildGLTexture();
	textNube1.ReleaseImage();

	textCaminoPeatonal.LoadTGA("camino1512x512.tga");
	textCaminoPeatonal.BuildGLTexture();
	textCaminoPeatonal.ReleaseImage();

	textCaminoCarritos.LoadTGA("caminoCarritos512x512.tga");
	textCaminoCarritos.BuildGLTexture();
	textCaminoCarritos.ReleaseImage();

	textBasePasto.LoadTGA("basePasto1.tga");
	textBasePasto.BuildGLTexture();
	textBasePasto.ReleaseImage();

	textBalon.LoadBMP("futbol/textura_balon512.bmp");
	textBalon.BuildGLTexture();
	textBalon.ReleaseImage();

	text1.LoadBMP("futbol/tribuna_v2.bmp");
	text1.BuildGLTexture();
	text1.ReleaseImage();


	objCamera.Position_Camera(0, 2.5f, 3, 0, 2.5f, 0, 0, 1, 0);


	//valida si pudo crear el motor de audio
	if (!engine)
	{
		printf("\n No pude crear el motor de audio :(");
		exit(0); //termina ejecución justo aquí
	}

	//reproduce con el 20% del sonido
	audioFondo->setDefaultVolume(0.2f);

	//reproduce el sonido sin detenerse
	engine->play2D(audioFondo, true);

	//NEW Iniciar variables de KeyFrames
	for (int i = 0; i < MAX_FRAMES; i++)
	{
		KeyFrame[i].posX = 0;
		KeyFrame[i].posY = 0;
		KeyFrame[i].posZ = 0;
		KeyFrame[i].incX = 0;
		KeyFrame[i].incY = 0;
		KeyFrame[i].incZ = 0;
		KeyFrame[i].rotRodIzq = 0;
		KeyFrame[i].rotInc = 0;
		KeyFrame[i].giroMonito = 0;
		KeyFrame[i].giroMonitoInc = 0;
		//Para el portero
		KeyFrame[i].posXp = 0;
		KeyFrame[i].posYp = 0;
		KeyFrame[i].posZp = 0;
		KeyFrame[i].IncXp = 0;
		KeyFrame[i].IncYp = 0;
		KeyFrame[i].IncZp = 0;


		//información de frame para balón
		KeyFrame[i].posXBal = 0;
		KeyFrame[i].posYBal = 0;
		KeyFrame[i].posZBal = 0;
		KeyFrame[i].incXBal = 0;
		KeyFrame[i].incYBal = 0;
		KeyFrame[i].incZBal = 0;

	}


}


void saveFrame(void)
{

	printf("frameindex %d\n", FrameIndex);

	KeyFrame[FrameIndex].posX = posX;
	KeyFrame[FrameIndex].posY = posY;
	KeyFrame[FrameIndex].posZ = posZ;
	KeyFrame[FrameIndex].rotRodIzq = rotRodIzq;
	KeyFrame[FrameIndex].giroMonito = giroMonito;

	//FRAMES DEL PORTERO
	KeyFrame[FrameIndex].posXp = posXp;
	KeyFrame[FrameIndex].posYp = posYp;
	KeyFrame[FrameIndex].posZp = posZp;
	//KeyFrame[FrameIndex].giraportero = giraportero;




	//información de frame para balón
	KeyFrame[FrameIndex].posXBal = posXBal;
	KeyFrame[FrameIndex].posYBal = posYBal;
	KeyFrame[FrameIndex].posZBal = posZBal;

	FrameIndex++;
}

void resetElements(void)
{
	posX = KeyFrame[0].posX;
	posY = KeyFrame[0].posY;
	posZ = KeyFrame[0].posZ;
	rotRodIzq = KeyFrame[0].rotRodIzq;
	giroMonito = KeyFrame[0].giroMonito;

	//DEL PORTERO
	posXp = KeyFrame[0].posXp;
	posYp = KeyFrame[0].posYp;
	posZp = KeyFrame[0].posZp;
	//giraportero = KeyFrame[0].giraportero;

	//información de frame para balón
	posXBal = KeyFrame[0].posXBal;
	posYBal = KeyFrame[0].posYBal;
	posZBal = KeyFrame[0].posZBal;

}

void interpolation(void)
{
	KeyFrame[playIndex].incX = (KeyFrame[playIndex + 1].posX - KeyFrame[playIndex].posX) / i_max_steps;
	KeyFrame[playIndex].incY = (KeyFrame[playIndex + 1].posY - KeyFrame[playIndex].posY) / i_max_steps;
	KeyFrame[playIndex].incZ = (KeyFrame[playIndex + 1].posZ - KeyFrame[playIndex].posZ) / i_max_steps;

	KeyFrame[playIndex].rotInc = (KeyFrame[playIndex + 1].rotRodIzq - KeyFrame[playIndex].rotRodIzq) / i_max_steps;
	KeyFrame[playIndex].giroMonitoInc = (KeyFrame[playIndex + 1].giroMonito - KeyFrame[playIndex].giroMonito) / i_max_steps;

	//información del portero
	//KeyFrame[playIndex].IncXp = (KeyFrame[playIndex + 1].posXp - KeyFrame[playIndex].posXp) / i_max_steps;
	//KeyFrame[playIndex].IncYp = (KeyFrame[playIndex + 1].posYp - KeyFrame[playIndex].posYp) / i_max_steps;
	//KeyFrame[playIndex].IncZp = (KeyFrame[playIndex + 1].posZp - KeyFrame[playIndex].posZp) / i_max_steps;
	//KeyFrame[playIndex].giraporteroInc = (KeyFrame[playIndex + 1].giraportero - KeyFrame[playIndex].giraportero) / i_max_steps;

	//información de frame para balón
	KeyFrame[playIndex].incXBal = (KeyFrame[playIndex + 1].posXBal - KeyFrame[playIndex].posXBal) / i_max_steps;
	KeyFrame[playIndex].incYBal = (KeyFrame[playIndex + 1].posYBal - KeyFrame[playIndex].posYBal) / i_max_steps;
	KeyFrame[playIndex].incZBal = (KeyFrame[playIndex + 1].posZBal - KeyFrame[playIndex].posZBal) / i_max_steps;
}


void monito(void)
{
	//glNewList(1, GL_COMPILE);
	glPushMatrix();//Pecho
	glScalef(0.5, 0.5, 0.5);
	glColor3f(1.0, 1.0, 1.0);
	jugador.prisma(2.0, 2.0, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();//Cuello
	glColor3f(1, 0.886, 0.643);//Aquí se cambia el color
	glTranslatef(0, 1.0, 0.0);
	jugador.cilindro(0.25, 0.25, 15, 0);
	glPushMatrix();//Cabeza
	glTranslatef(0, 1.0, 0);
	glColor3f(1, 0.886, 0.643);//Aquí se cambia el color
	jugador.esfera(0.75, 15, 15, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //Brazo derecho-->
	glTranslatef(1.25, 0.65, 0);
	jugador.esfera(0.5, 12, 12, 0);//Manga de la playera
	glPushMatrix();
	glTranslatef(0.25, 0, 0);
	glRotatef(-45, 0, 1, 0);
	glTranslatef(0.75, 0, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR
	jugador.prisma(0.7, 1.5, 0.7, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //Brazo izquierdo <--
	glTranslatef(-1.25, 0.65, 0);
	jugador.esfera(0.5, 12, 12, 0);//Manga de la playera
	glPushMatrix();
	glTranslatef(-0.25, 0, 0);
	glRotatef(45, 0, 1, 0);
	glRotatef(25, 0, 0, 1);
	glRotatef(25, 1, 0, 0);
	glTranslatef(-0.75, 0, 0);
	glColor3f(1, 0.886, 0.643);//AQUI SE CAMBIA EL COLOR
	jugador.prisma(0.7, 1.5, 0.7, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix();//Cintura
	glTranslatef(0, -1.5, 0);
	glColor3f(0, 0, 0);//AQUÍ SE CAMBIA EL COLOR DEL SHORT
	jugador.prisma(1, 2, 1, 0);

	glPushMatrix(); //Pierna Derecha -->
	glTranslatef(0.75, -0.5, 0);
	glRotatef(-15, 1, 0, 0);
	glTranslatef(0, -0.5, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR DE LA PIERNA
	jugador.prisma(1.0, 0.5, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();
	glTranslatef(0, -0.5, 0);
	glRotatef(15, 1, 0, 0);
	glTranslatef(0, -0.75, 0);
	jugador.prisma(1.5, 0.5, 1, 0);

	glPushMatrix();
	glTranslatef(0, -0.75, 0.3);
	jugador.prisma(0.2, 1.2, 1.5, 0);
	glPopMatrix();
	glPopMatrix();
	glPopMatrix();


	glPushMatrix(); //Pierna Izquierda -->
	glTranslatef(-0.75, -0.5, 0);
	glRotatef(-5, 1, 0, 0);
	glTranslatef(0, -0.5, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR DE LAS PIERNAS
	jugador.prisma(1.0, 0.5, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();
	glTranslatef(0, -0.5, 0);
	glRotatef(15 + rotRodIzq, 1, 0, 0);
	glTranslatef(0, -0.75, 0);
	jugador.prisma(1.5, 0.5, 1, 0);

	glPushMatrix();
	glTranslatef(0, -0.75, 0.3);
	jugador.prisma(0.2, 1.2, 1.5, 0);
	glPopMatrix();
	glPopMatrix();
	glPopMatrix();


	glPopMatrix();


	glColor3f(1.0, 1.0, 1.0);
	glPopMatrix();
	//glEndList();
}


void portero(void)
{
	glPushMatrix();
	glRotatef(-90, 0.0, 1.0, 0.0);
	//glNewList(1, GL_COMPILE);
	glPushMatrix();//Pecho
	glScalef(0.5, 0.5, 0.5);
	glColor3f(1.0, 1.0, 1.0);
	jugador.prisma(2.0, 2.0, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();//Cuello
	glColor3f(1, 0.886, 0.643);//Aquí se cambia el color
	glTranslatef(0, 1.0, 0.0);
	jugador.cilindro(0.25, 0.25, 15, 0);
	glPushMatrix();//Cabeza
	glTranslatef(0, 1.0, 0);
	glColor3f(1, 0.886, 0.643);//Aquí se cambia el color
	jugador.esfera(0.75, 15, 15, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //Brazo derecho-->
	glTranslatef(1.25, 0.65, 0);
	jugador.esfera(0.5, 12, 12, 0);//Manga de la playera
	glPushMatrix();
	glTranslatef(0.25, 0, 0);
	glRotatef(-45, 0, 1, 0);
	glTranslatef(0.75, 0, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR
	jugador.prisma(0.7, 1.5, 0.7, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //Brazo izquierdo <--
	glTranslatef(-1.25, 0.65, 0);
	jugador.esfera(0.5, 12, 12, 0);//Manga de la playera
	glPushMatrix();
	glTranslatef(-0.25, 0, 0);
	glRotatef(45, 0, 1, 0);
	glRotatef(25, 0, 0, 1);
	glRotatef(25, 1, 0, 0);
	glTranslatef(-0.75, 0, 0);
	glColor3f(1, 0.886, 0.643);//AQUI SE CAMBIA EL COLOR
	jugador.prisma(0.7, 1.5, 0.7, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix();//Cintura
	glTranslatef(0, -1.5, 0);
	glColor3f(0.0, 0.0, 1.0);//AQUÍ SE CAMBIA EL COLOR DEL SHORT
	jugador.prisma(1, 2, 1, 0);

	glPushMatrix(); //Pierna Derecha -->
	glTranslatef(0.75, -0.5, 0);
	glRotatef(-15, 1, 0, 0);
	glTranslatef(0, -0.5, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR DE LA PIERNA
	jugador.prisma(1.0, 0.5, 1, 0);
	glColor3f(0.0, 0.0, 0.0);

	glPushMatrix();
	glTranslatef(0, -0.5, 0);
	glRotatef(15, 1, 0, 0);
	glTranslatef(0, -0.75, 0);
	//glColor3f(1.0, 1.0, 1.0);
	jugador.prisma(1.5, 0.5, 1, 0);

	glPushMatrix();
	glTranslatef(0, -0.75, 0.3);
	glColor3f(0.122, 1.0, 0.122); //ZAPATO DERECHO
	jugador.prisma(0.2, 1.2, 1.5, 0);
	glPopMatrix();
	glPopMatrix();
	glPopMatrix();


	glPushMatrix(); //Pierna Izquierda -->
	glTranslatef(-0.75, -0.5, 0);
	glRotatef(-5, 1, 0, 0);
	glTranslatef(0, -0.5, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR DE LAS PIERNAS
	jugador.prisma(1.0, 0.5, 1, 0);
	//glColor3f(1.0, 0.122, 0.122);//PANTORRILLA Y CALCETAS DERECHA

	glPushMatrix();
	glTranslatef(0, -0.5, 0);
	glRotatef(15 + rotRodIzq, 1, 0, 0);
	glTranslatef(0, -0.75, 0);
	glColor3f(0.0, 0.0, 0.0);//PANTORIILLA Y CALCETAS IZQUIERDA
	jugador.prisma(1.5, 0.5, 1, 0);

	glPushMatrix();
	glTranslatef(0, -0.75, 0.3);
	glColor3f(0.122, 1.0, 0.122);//ZAPATO IZQUIERDO
	jugador.prisma(0.2, 1.2, 1.5, 0);
	glPopMatrix();
	glPopMatrix();
	glPopMatrix();


	glPopMatrix();
	glPopMatrix();


	glColor3f(1.0, 1.0, 1.0);
	glPopMatrix();
	//glEndList();
}

void defensa(void)
{
	//glNewList(1, GL_COMPILE);
	glPushMatrix();//Pecho
	glScalef(0.5, 0.5, 0.5);
	glColor3f(1.0, 1.0, 1.0);
	jugador.prisma(2.0, 2.0, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();//Cuello
	glColor3f(1, 0.886, 0.643);//Aquí se cambia el color
	glTranslatef(0, 1.0, 0.0);
	jugador.cilindro(0.25, 0.25, 15, 0);
	glPushMatrix();//Cabeza
	glTranslatef(0, 1.0, 0);
	glColor3f(1, 0.886, 0.643);//Aquí se cambia el color
	jugador.esfera(0.75, 15, 15, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //Brazo derecho-->
	glTranslatef(1.25, 0.65, 0);
	jugador.esfera(0.5, 12, 12, 0);//Manga de la playera
	glPushMatrix();
	glTranslatef(0.25, 0, 0);
	glRotatef(-45, 0, 1, 0);
	glTranslatef(0.75, 0, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR
	jugador.prisma(0.7, 1.5, 0.7, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //Brazo izquierdo <--
	glTranslatef(-1.25, 0.65, 0);
	jugador.esfera(0.5, 12, 12, 0);//Manga de la playera
	glPushMatrix();
	glTranslatef(-0.25, 0, 0);
	glRotatef(45, 0, 1, 0);
	glRotatef(25, 0, 0, 1);
	glRotatef(25, 1, 0, 0);
	glTranslatef(-0.75, 0, 0);
	glColor3f(1, 0.886, 0.643);//AQUI SE CAMBIA EL COLOR
	jugador.prisma(0.7, 1.5, 0.7, 0);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix();//Cintura
	glTranslatef(0, -1.5, 0);
	glColor3f(0, 0, 0);//AQUÍ SE CAMBIA EL COLOR DEL SHORT
	jugador.prisma(1, 2, 1, 0);

	glPushMatrix(); //Pierna Derecha -->
	glTranslatef(0.75, -0.5, 0);
	glRotatef(-15, 1, 0, 0);
	glTranslatef(0, -0.5, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR DE LA PIERNA
	jugador.prisma(1.0, 0.5, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();
	glTranslatef(0, -0.5, 0);
	glRotatef(15, 1, 0, 0);
	glTranslatef(0, -0.75, 0);
	jugador.prisma(1.5, 0.5, 1, 0);

	glPushMatrix();
	glTranslatef(0, -0.75, 0.3);
	jugador.prisma(0.2, 1.2, 1.5, 0);
	glPopMatrix();
	glPopMatrix();
	glPopMatrix();


	glPushMatrix(); //Pierna Izquierda -->
	glTranslatef(-0.75, -0.5, 0);
	glRotatef(-5, 1, 0, 0);
	glTranslatef(0, -0.5, 0);
	glColor3f(1, 0.886, 0.643);//AQUÍ SE CAMBIA EL COLOR DE LAS PIERNAS
	jugador.prisma(1.0, 0.5, 1, 0);
	glColor3f(1.0, 1.0, 1.0);

	glPushMatrix();
	glTranslatef(0, -0.5, 0);
	glRotatef(15 + rotRodIzq, 1, 0, 0);
	glTranslatef(0, -0.75, 0);
	jugador.prisma(1.5, 0.5, 1, 0);

	glPushMatrix();
	glTranslatef(0, -0.75, 0.3);
	jugador.prisma(0.2, 1.2, 1.5, 0);
	glPopMatrix();
	glPopMatrix();
	glPopMatrix();


	glPopMatrix();


	glColor3f(1.0, 1.0, 1.0);
	glPopMatrix();
	//glEndList();
}

void ciudad(void)
{
	glPushMatrix(); //base de pasto que cubre largo y profundidad del skybox
	glScalef(130, 0.025, 130);
	glDisable(GL_LIGHTING);
	figBasePasto.prisma2(textBasePasto.GLindex, 0);
	glEnable(GL_LIGHTING);
	glPopMatrix();


	glPushMatrix(); //Campo
					//glTranslatef(23.5,0.0,0.0);
					//el campo mide 100 x 64 pero usaré la mitad de tamaño
					//agrego 4 más por el pasto fuera del campo
	glScalef(54, 0.1, 36);
	glDisable(GL_LIGHTING);
	figCampo.prisma2(textCampo.GLindex, 0);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	glPushMatrix(); //Grada frontal
	glTranslatef(0.0,3.0,-21.0);
	glRotatef(90,1,0,0);
	//glRotatef(180,0,0,1);
	glScalef(54,5.0,6);
	glDisable(GL_LIGHTING);
	figGradaFrontal.prisma2(text1.GLindex, textGrada.GLindex);
	glEnable(GL_LIGHTING);
	glPopMatrix();


	//PORTERIA ORIGINAL
	glPushMatrix(); //poste1
	glTranslatef(25.0, 0.0, -3.6);
	figPostes.cilindro(0.1, 2.0, 30.0, 0);
	glPopMatrix();

	glPushMatrix(); //poste2
	glTranslatef(25.0, 0.0, 3.6);
	figPostes.cilindro(0.1, 2.0, 30.0, 0);
	glPopMatrix();

	glPushMatrix(); //travesaño
	glTranslatef(25.0, 2.05, -3.65);
	glRotatef(90.0, 1.0, 0.0, 0.0);
	figPostes.cilindro(0.1, 7.32, 30.0, 0);
	glPopMatrix();

	//PORTERIA CONTRARIA
	glPushMatrix(); //poste1
	glTranslatef(-25.0, 0.0, -3.6);
	figPostes.cilindro(0.1, 2.0, 30.0, 0);
	glPopMatrix();

	glPushMatrix(); //poste2
	glTranslatef(-25.0, 0.0, 3.6);
	figPostes.cilindro(0.1, 2.0, 30.0, 0);
	glPopMatrix();

	glPushMatrix(); //travesaño
	glTranslatef(-25.0, 2.05, -3.65);
	glRotatef(90.0, 1.0, 0.0, 0.0);
	figPostes.cilindro(0.1, 7.32, 30.0, 0);
	glPopMatrix();


	glPushMatrix(); //Tierra inferior para espacio para arbolitos
	glTranslatef(0.0, 0.0, 21.0);
	//glRotatef(90,1,0,0);
	//glRotatef(180,0,0,1);
	glScalef(54, 0.1, 6);
	glDisable(GL_LIGHTING);
	figGradaFrontal.prisma2CaminosH(textTierra.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	glPushMatrix(); //Tierra lateral derecha para espacio para arbolitos
	glTranslatef(30.0, 0.0, 0.0);
	glRotatef(90, 0, 1, 0);
	//glRotatef(180,0,0,1);
	glScalef(48, 0.1, 6);
	glDisable(GL_LIGHTING);
	figGradaFrontal.prisma2CaminosH(textTierra.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();


	//bloque para camino peatonal
	glPushMatrix(); //camino peatonal inferior
	glTranslatef(0.0, 0.0, 26.0);
	glScalef(66, 0.1, 4);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoPeatonal.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	glPushMatrix(); //camino peatonal lateral derecho
	glTranslatef(35.0, 0.0, 0.0);
	glRotatef(90, 0, 1, 0);
	glScalef(56, 0.1, 4);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoPeatonal.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	glPushMatrix(); //camino peatonal lateral derecho (bosque)
	glTranslatef(45.0, 0.0, 0.0);
	glRotatef(90, 0, 1, 0);
	glScalef(56, 0.1, 4);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoPeatonal.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();


	//camino peatonal lateral izquierdo
	glPushMatrix();
	glTranslatef(-35.0, 0.0, 0.0);
	glRotatef(90, 0, 1, 0);
	glScalef(56, 0.1, 4.0);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoPeatonal.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	//camino peatonal superior
	glPushMatrix();
	glTranslatef(0.0, 0.0, -26.0);
	glScalef(66, 0.1, 4);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoPeatonal.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	//bloque para camino de carritos
	glPushMatrix(); //camino carritos inferior
	glTranslatef(0.0, 0.0, 31.0);
	glScalef(74, 0.05, 6);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoCarritos.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	//camino de carritos superior
	glPushMatrix();
	glTranslatef(0.0, 0.0, -31.0);
	glScalef(74, 0.05, 6);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoCarritos.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	glPushMatrix(); //camino carritos lateral derecho
	glTranslatef(40.0, 0.0, 0.0);
	glRotatef(90, 0, 1, 0);
	glScalef(68, 0.05, 6);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoCarritos.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();

	//camino de carritos lateral izquierdo
	glPushMatrix();
	glTranslatef(-40.0, 0.0, 0.0);
	glRotatef(90, 0, 1, 0);
	glScalef(68, 0.05, 6);
	glDisable(GL_LIGHTING);
	figCaminoPeatonal.prisma2CaminosH(textCaminoCarritos.GLindex, 6);
	glEnable(GL_LIGHTING);
	glPopMatrix();
}


void arbol_fondoTransparente(CTexture textura)
{
	glPushMatrix();
	glDisable(GL_LIGHTING);
	glEnable(GL_ALPHA_TEST);
	glAlphaFunc(GL_GREATER, 0.1);
	//glBindTexture(GL_TEXTURE_2D, textArbol1.GLindex);
	glBindTexture(GL_TEXTURE_2D, textura.GLindex);

	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(45, 0, 1, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(-45, 0, 1, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(90, 0, 1, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glDisable(GL_ALPHA_TEST);
	glEnable(GL_LIGHTING);

	glPopMatrix();
}


void nube(CTexture textura)
{
	glPushMatrix();
	glDisable(GL_LIGHTING);
	glEnable(GL_ALPHA_TEST);
	glAlphaFunc(GL_GREATER, 0.1);
	glBindTexture(GL_TEXTURE_2D, textura.GLindex);

	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(11.25, 1, 0, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(22.5, 1, 0, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(33.75, 1, 0, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(-11.25, 1, 0, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(-22.5, 1, 0, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glRotatef(-33.75, 1, 0, 0);
	glBegin(GL_QUADS); //plano
	glColor3f(1.0, 1.0, 1.0);
	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f); glVertex3f(-10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 0.0f); glVertex3f(10.0, 0.0, 0.0);
	glTexCoord2f(1.0f, 1.0f); glVertex3f(10.0, 20.0, 0.0);
	glTexCoord2f(0.0f, 1.0f); glVertex3f(-10.0, 20.0, 0.0);
	glEnd();
	glPopMatrix();
}


void pintaTexto(float x, float y, float z, void *font, char *string)
{
	char *c;     //Almacena los caracteres a escribir
	glRasterPos3f(x, y, z);	//Posicion apartir del centro de la ventana
							//glWindowPos2i(150,100);
	for (c = string; *c != '\0'; c++) //Condicion de fin de cadena
	{
		glutBitmapCharacter(font, *c); //imprime
	}
}

void dibujar(void)   // Creamos la funcion donde se dibuja
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		// Limpiamos pantalla y Depth Buffer

	glLoadIdentity();

	glPushMatrix();


	glRotatef(g_lookupdown, 1.0f, 0, 0);

	gluLookAt(objCamera.mPos.x, objCamera.mPos.y, objCamera.mPos.z,
		objCamera.mView.x, objCamera.mView.y, objCamera.mView.z,
		objCamera.mUp.x, objCamera.mUp.y, objCamera.mUp.z);


	glPushMatrix();

	glPushMatrix(); //Creamos cielo
	glDisable(GL_LIGHTING);

	//skybox modificado para recibir una imagen por cada cara
	figSkybox.skyboxH(130.0, 130.0, 130.0, textSkyboxFrontal.GLindex, textSkyboxAtras.GLindex, textSkyboxIzquierda.GLindex, textSkyboxDerecha.GLindex, textSkyboxArriba.GLindex);

	glEnable(GL_LIGHTING);
	glPopMatrix();


	glPushMatrix(); //creamos la ciudad
	glEnable(GL_COLOR_MATERIAL);
	ciudad();
	glDisable(GL_COLOR_MATERIAL);
	glPopMatrix();


	glPushMatrix(); //creamos varios árbolitos con fondo transparente
	glTranslatef(0.0, 0.0, 21.0);
	arbol_fondoTransparente(textArbol1);

	glPushMatrix();
	glTranslatef(10.0, 0.0, 0.0);
	glScalef(0.5, 0.5, 0.5);
	arbol_fondoTransparente(textArbol2);
	glPopMatrix();
	glPopMatrix();

	//creando un arbolito propio
	glPushMatrix();
	glTranslatef(0.0, 0.0, 40.0);
	arbol_fondoTransparente(textArbol1);
	glScalef(0.5, 0.5, 0.5);
	glPopMatrix();

	//crenado arbolito propio 
	glPushMatrix();
	glTranslatef(-25.0, 0.0, 40.0);
	arbol_fondoTransparente(textArbol2);
	glScalef(0.2, 0.2, 0.2);
	glPopMatrix();

	glPushMatrix(); //creamos árbolitos con ciclo
	glTranslatef(30.0, 0.0, -24.0);

	for (int coloca = 0; coloca <= 48; coloca += 3)
	{
		glPushMatrix();
		glTranslatef(0.0, 0.0, (float)coloca);
		glScalef(0.2, 0.2, 0.2);
		arbol_fondoTransparente(textArbol2);
		glPopMatrix();
	}
	glPopMatrix();

	glPushMatrix(); //creamos árbolitos con ciclo #2
	glTranslatef(50.0, 0.0, -24.0);

	for (int coloca = 0; coloca <= 48; coloca += 3)
	{
		glPushMatrix();
		glTranslatef(0.0, 0.0, (float)coloca);
		glScalef(0.2, 0.2, 0.2);
		arbol_fondoTransparente(textArbol2);
		glPopMatrix();
	}
	glPopMatrix();

	//creamos árbolitos con ciclo #3
	glPushMatrix();
	glTranslatef(-30.0, 0.0, -24.0);

	for (int coloca = 0; coloca <= 48; coloca += 3)
	{
		glPushMatrix();
		glTranslatef(0.0, 0.0, (float)coloca);
		glScalef(0.2, 0.2, 0.2);
		arbol_fondoTransparente(textArbol2);
		glPopMatrix();
	}
	glPopMatrix();


	glPushMatrix();
	glTranslatef(0.0, 50.0, 0.0);
	nube(textNube1);
	glPopMatrix();


	//Se dibuja al monito
	glPushMatrix();
	glEnable(GL_COLOR_MATERIAL);
	glColor3f(1, 1, 1);
	//glScalef(0.5, 0.5, 0.5);
	//monito();
	glCallList(ciudad_display_list);
	glTranslatef(posX, posY, posZ);
	glRotatef(giroMonito, 0, 1, 0);
	monito();
	//balon();
	glDisable(GL_COLOR_MATERIAL);
	glPopMatrix();

	//Aquí se dibuja al portero
	glPushMatrix();
	glEnable(GL_COLOR_MATERIAL);
	glColor3f(1, 1, 1);
	//glScalef(0.5, 0.5, 0.5);
	//monito();
	glCallList(ciudad_display_list);
	glTranslatef(posXp, posYp, movZportero);
	//glRotatef(giraportero, 0, 1, 0);
	portero();
	//balon();
	glDisable(GL_COLOR_MATERIAL);
	glPopMatrix();


	//Aquí se dibuja al defensa
	glPushMatrix();
	glEnable(GL_COLOR_MATERIAL);
	glColor3f(1, 1, 1);
	//glScalef(0.5, 0.5, 0.5);
	//monito();
	glCallList(ciudad_display_list);
	glTranslatef(posXd, movYdefensa, posZd);
	glRotatef(-90, 0, 1, 0);
	defensa();
	//balon();
	glDisable(GL_COLOR_MATERIAL);
	glPopMatrix();

	//aqui dibuja balon
	glPushMatrix();
	glTranslatef(posXBal, posYBal, posZBal);
	glColor3f(1.0, 1.0, 1.0);
	balon.esfera(0.5, 15, 15, textBalon.GLindex);
	glPopMatrix();

	glPopMatrix();
	glPopMatrix();


	glDisable(GL_TEXTURE_2D);
	glDisable(GL_LIGHTING);
	glColor3f(1.0, 0.0, 0.0);
	pintaTexto(-11, 12.0, -14.0, (void *)font, "Proyecto final");
	pintaTexto(-11, 8.5, -14, (void *)font, "Estadio de futbol");
	glColor3f(1.0, 1.0, 1.0);
	glEnable(GL_LIGHTING);
	glEnable(GL_TEXTURE_2D);

	glFlush();
	glutSwapBuffers();

}

void animacion(void)
{
	//MOVIMIENTO DEL PORTERO
	if (porteroPos)
	{
		movZportero += 0.05f;
	}
	else if (!porteroPos)
	{
		movZportero -= 0.05f;
	}
	if (movZportero >= 3.0f)
	{
		porteroPos = false;
	}
	else if (movZportero <= -3.0f)
	{
		porteroPos = true;
	}


	//MOVIMIENTO DEL DEFENSA
	if (animadefensa == true)
	{
		if (defensaPos)
		{
			movYdefensa += 0.01f;
		}
		else if (!defensaPos)
		{
			movYdefensa -= 0.01f;
		}
		if (movYdefensa >= 3.5f)
		{
			defensaPos = false;
		}
		else if (movYdefensa <= 2.5f)
		{
			defensaPos = true;
		}
	}



	//Movimiento del monito
	if (play)
	{

		if (i_curr_steps >= i_max_steps) //end of animation between frames?
		{
			playIndex++;
			if (playIndex>FrameIndex - 2)	//end of total animation?
			{
				printf("termina anim\n");
				playIndex = 0;
				play = false;
			}
			else //Next frame interpolations
			{
				i_curr_steps = 0; //Reset counter
								  //Interpolation
				interpolation();

			}
		}
		else
		{
			//Draw animation
			posX += KeyFrame[playIndex].incX;
			posY += KeyFrame[playIndex].incY;
			posZ += KeyFrame[playIndex].incZ;

			rotRodIzq += KeyFrame[playIndex].rotInc;
			giroMonito += KeyFrame[playIndex].giroMonitoInc;


			//información de frame para balón
			posXBal += KeyFrame[playIndex].incXBal;
			posYBal += KeyFrame[playIndex].incYBal;
			posZBal += KeyFrame[playIndex].incZBal;


			i_curr_steps++;

		}


	}

	glutPostRedisplay();

}


void remodelar(int width, int height)
{
	if (height == 0)	// Prevenir división entre cero
	{
		height = 1;
	}

	glViewport(0, 0, width, height);

	glMatrixMode(GL_PROJECTION);	// Seleccionamos Projection Matrix
	glLoadIdentity();

	// Tipo de Vista
	glFrustum(-0.1, 0.1, -0.1, 0.1, 0.1, 500.0);

	glMatrixMode(GL_MODELVIEW);		// Seleccionamos Modelview Matrix
	glLoadIdentity();
}

void menuKeyFrame(int id)
{
	switch (id)
	{
	case 0:	//Save KeyFrame
		if (FrameIndex<MAX_FRAMES)
		{
			saveFrame();
		}
		break;

	case 1:	//Play animation
		if (play == false && FrameIndex >1)
		{

			resetElements();
			//First Interpolation
			interpolation();

			play = true;
			playIndex = 0;
			i_curr_steps = 0;
		}
		else
		{
			play = false;
		}
		break;


	}
}

void menu(int id)
{

}



void teclado(unsigned char key, int x, int y)
{
	switch (key) {
	case 'w': case 'W':
		objCamera.Move_Camera(CAMERASPEED + 0.2);
		break;

	case 's': case 'S':
		objCamera.Move_Camera(-(CAMERASPEED + 0.2));
		break;

	case 'a': case 'A':
		objCamera.Strafe_Camera(-(CAMERASPEED + 0.4));
		break;

	case 'd': case 'D':
		objCamera.Strafe_Camera(CAMERASPEED + 0.4);
		break;

	case 'p':
		engine->play2D(audioPikachu);
		break;

	case 'v':
		giroMonito--;
		break;

	case 'V':
		giroMonito++;
		break;

	case 'f':
		animadefensa = !animadefensa;
		break;

	case 'y':
		posYBal++;
		printf("%f \n", posYBal);
		break;

	case 'Y':
		posYBal--;
		printf("%f \n", posYBal);
		break;

	case 'g':
		posXBal++;
		printf("%f \n", posXBal);
		break;

	case 'G':
		posXBal--;
		printf("%f \n", posXBal);
		break;

	case 'b':
		rotRodIzq++;
		printf("%f \n", rotRodIzq);
		break;

	case 'B':
		rotRodIzq--;
		printf("%f \n", rotRodIzq);
		break;

	case 'j':
		posX++;
		printf("%f \n", posX);
		break;

	case 'J':
		posX--;
		printf("%f \n", posX);
		break;

	case 'z':
		posZ++;
		printf("%f \n", posZ);
		break;

	case 'Z':
		posZ--;
		printf("%f \n", posZ);
		break;


	case 27:  //Si presiona tecla ESC (ASCII 27) sale
		exit(0);
		break;

	default:  //Si es cualquier otra tecla no hace nada
		break;
	}

	glutPostRedisplay();
}

void teclasFlechasFunc(int a_keys, int x, int y)
{
	switch (a_keys) {
	case GLUT_KEY_PAGE_UP:	//tecla avance de página
		objCamera.UpDown_Camera(CAMERASPEED);
		break;

	case GLUT_KEY_PAGE_DOWN:	//tecla retroceso de página
		objCamera.UpDown_Camera(-CAMERASPEED);
		break;

	case GLUT_KEY_UP:	//tecla ARRIBA
		g_lookupdown -= 1.0f;
		break;

	case GLUT_KEY_DOWN:	//tecla ABAJO
		g_lookupdown += 1.0f;
		break;

	case GLUT_KEY_LEFT:	//tecla izquierda
		objCamera.Rotate_View(-CAMERASPEED);
		break;

	case GLUT_KEY_RIGHT:	//tecla derecha
		objCamera.Rotate_View(CAMERASPEED);
		break;

		//teclas para cámara
	case GLUT_KEY_F1:
		//cámara en el centro del campo
		objCamera.Position_Camera(0, 2.5f, 3, 0, 2.5f, 0, 0, 1, 0);
		break;

	case GLUT_KEY_F2:
		//cámara de transmisión
		objCamera.Position_Camera(0, 10.0f, 20, 0, 2.5f, 0, 0, 1, 0);
		break;

	case GLUT_KEY_F3:
		//cámara desde el centro hacia la portería
		objCamera.Position_Camera(5.0, 2.5f, 0, 20, 2.5f, 0, 0, 1, 0);
		break;

	case GLUT_KEY_F4:
		//cámara del tiro de esquina
		objCamera.Position_Camera(25.0, 2.5f, 20, 20, 2.5f, 0, 0, 1, 0);
		break;

	case GLUT_KEY_F6:
		//cámara sobre línea de gol
		objCamera.Position_Camera(25.0, 15.0f, 0, 25, 0, 0, 1, 0, 0);
		break;

	default:
		break;
	}
	glutPostRedisplay();
}

int main(int argc, char** argv)   // Main Function
{
	int submenu;

	//inicializa GLUT con el sistema de ventanas pasando los argumentos del main
	glutInit(&argc, argv);

	//Buffer simple para dibujar
	//Colores RGB y alpha
	//Buffer de profundidad
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);

	//Define ventana de 500 pixeles de ancho por 500 de alto
	glutInitWindowSize(700, 700);

	//Posiciona la ventana de izquierda a derecha 400 pixeles y de arriba a abajo 100
	glutInitWindowPosition(400, 100);

	//Crea y abre la ventana y recibe el nombre que va en su barra de título
	glutCreateWindow("Hola Mundo");

	//Llamada a función propia para inicializar estados de opengl
	inicializar();

	//Llamada a la función a ser dibujada y redibujada
	glutDisplayFunc(dibujar);

	//Llamada a función para cambio de tamaño de ventana
	glutReshapeFunc(remodelar);

	//Lamada a función que maneja eventos del teclado con teclas normales
	glutKeyboardFunc(teclado);

	//Lamada a función que maneja eventos del teclado con teclas de flechas de dirección y f1, f2 .. fn
	glutSpecialFunc(teclasFlechasFunc);

	glutIdleFunc(animacion);

	//bloque para menú gráfico
	submenu = glutCreateMenu(menuKeyFrame);
	glutAddMenuEntry("Guardar KeyFrame", 0);
	glutAddMenuEntry("Reproducir Animacion", 1);
	glutCreateMenu(menu);
	glutAddSubMenu("Animacion Monito y balon", submenu);

	glutAttachMenu(GLUT_RIGHT_BUTTON);

	//Llamada a función que cede el control a GLUT y procesa eventos de ventana, ratón
	glutMainLoop();

	//termina la ejecución devolviendo cero
	return 0;

}
